using System.Text;
using JwtAuthApi.Services;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;

var builder = WebApplication.CreateBuilder(args);

// üîß Registro do servi√ßo de gera√ß√£o de token (inje√ß√£o de depend√™ncia)
builder.Services.AddSingleton<TokenService>();

// üß± Adiciona os servi√ßos de controladores (Controllers da API)
builder.Services.AddControllers();

// üîê L√™ as configura√ß√µes do JWT definidas no appsettings.json
var jwtSettings = builder.Configuration.GetSection("JwtSettings");

// üîê Converte a chave secreta (string) em bytes para uso com HMAC
var secretKey = Encoding.UTF8.GetBytes(jwtSettings["SecretKey"]!);

// üîê Configura a autentica√ß√£o JWT
builder.Services.AddAuthentication(options =>
{
    // Define o esquema padr√£o de autentica√ß√£o como "Bearer"
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    // ‚ö†Ô∏è Apenas para desenvolvimento: n√£o exige HTTPS (n√£o recomendado em produ√ß√£o)
    options.RequireHttpsMetadata = false;

    // Salva o token no contexto da requisi√ß√£o
    options.SaveToken = true;

    // üõ°Ô∏è Define os par√¢metros de valida√ß√£o do token JWT
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,            // Valida o emissor (Issuer)
        ValidateAudience = true,          // Valida o p√∫blico (Audience)
        ValidateLifetime = true,          // Valida a expira√ß√£o do token
        ValidateIssuerSigningKey = true,  // Valida a assinatura do token

        // Valores que ser√£o comparados com os do token
        ValidIssuer = jwtSettings["Issuer"],
        ValidAudience = jwtSettings["Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(secretKey)
    };
});

// üöÄ Cria a aplica√ß√£o (pipeline configurado)
var app = builder.Build();

// ‚õî Ativa o middleware de autentica√ß√£o (verifica token JWT)
app.UseAuthentication();

// ‚úÖ Ativa o middleware de autoriza√ß√£o (verifica permiss√µes/pol√≠ticas)
app.UseAuthorization();

// üö™ Mapeia os controllers (rotas como /auth/login, /protected/secret)
app.MapControllers();

// ‚ñ∂Ô∏è Inicia a aplica√ß√£o
app.Run();
